apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    ${AWS_CONTROLLER_IAM_ROLE/#arn/eks.amazonaws.com/role-arn: arn}
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
    control-plane: controller-manager
  name: capa-controller-manager
  namespace: capa-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
  name: capa-leader-elect-role
  namespace: capa-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
  name: capa-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - eksconfigs
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - eksconfigs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  - machinedeployments
  - machines
  - machines/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinepools
  - machinepools/status
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - awsmanagedcontrolplanes
  - rosacontrolplanes
  verbs:
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - awsmanagedcontrolplanes/status
  - rosacontrolplanes/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controlplane.cluster.x-k8s.io
  resources:
  - rosacontrolplanes/finalizers
  verbs:
  - update
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsclustercontrolleridentities
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsclusterroleidentities
  - awsclusterstaticidentities
  - awsmachinetemplates
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsclusters
  - awsfargateprofiles
  - awsmachinepools
  - awsmachines
  - awsmanagedclusters
  - awsmanagedmachinepools
  - rosaclusters
  - rosamachinepools
  verbs:
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsclusters/status
  - awsfargateprofiles/status
  - rosaclusters/status
  - rosamachinepools/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsmachinepools/status
  - awsmachines/status
  - awsmanagedclusters/status
  - awsmanagedmachinepools/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - rosamachinepools/finalizers
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
  name: capa-leader-elect-rolebinding
  namespace: capa-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capa-leader-elect-role
subjects:
- kind: ServiceAccount
  name: capa-controller-manager
  namespace: capa-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
  name: capa-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capa-manager-role
subjects:
- kind: ServiceAccount
  name: capa-controller-manager
  namespace: capa-system
---
apiVersion: v1
data:
  credentials: ${AWS_B64ENCODED_CABUNDLE}
kind: Secret
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
  name: capa-manager-bootstrap-ca-bundle
  namespace: capa-system
type: Opaque
---
apiVersion: v1
data:
  credentials: ${AWS_B64ENCODED_CREDENTIALS}
kind: Secret
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
  name: capa-manager-bootstrap-credentials
  namespace: capa-system
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
    control-plane: capa-controller-manager
  name: capa-controller-manager
  namespace: capa-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: infrastructure-aws
      control-plane: capa-controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: infrastructure-aws
        control-plane: capa-controller-manager
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: ${K8S_CP_LABEL:=node-role.kubernetes.io/control-plane}
                operator: Exists
            weight: 10
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
            weight: 10
      containers:
      - args:
        - --leader-elect
        - --feature-gates=EKS=${CAPA_EKS:=true},EKSEnableIAM=${CAPA_EKS_IAM:=false},EKSAllowAddRoles=${CAPA_EKS_ADD_ROLES:=false},EKSFargate=${EXP_EKS_FARGATE:=false},MachinePool=${EXP_MACHINE_POOL:=false},EventBridgeInstanceState=${EVENT_BRIDGE_INSTANCE_STATE:=false},AutoControllerIdentityCreator=${AUTO_CONTROLLER_IDENTITY_CREATOR:=true},BootstrapFormatIgnition=${EXP_BOOTSTRAP_FORMAT_IGNITION:=false},ExternalResourceGC=${EXP_EXTERNAL_RESOURCE_GC:=false},AlternativeGCStrategy=${EXP_ALTERNATIVE_GC_STRATEGY:=false},TagUnmanagedNetworkResources=${TAG_UNMANAGED_NETWORK_RESOURCES:=true},ROSA=${EXP_ROSA:=false}
        - --v=${CAPA_LOGLEVEL:=0}
        - --diagnostics-address=${CAPA_DIAGNOSTICS_ADDRESS:=:8443}
        - --insecure-diagnostics=${CAPA_INSECURE_DIAGNOSTICS:=false}
        env:
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /home/.aws/credentials
        - name: AWS_CONFIG_FILE
          value: /home/.aws/config
        - name: AWS_SDK_LOAD_CONFIG
          value: "true"
        image: gcr.io/k8s-staging-cluster-api-aws/cluster-api-aws-controller:latest
        imagePullPolicy: Always
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsGroup: 65532
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /home/.aws
          name: credentials
        - mountPath: /home/.aws/ca-bundle
          name: ca-bundle
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - name: credentials
        secret:
          secretName: capa-manager-bootstrap-credentials
      - name: ca-bundle
        secret:
          secretName: capa-manager-bootstrap-ca-bundle
